{
  "api/Bonsai.ML.LinearDynamicalSystems.CreateModelReference.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.CreateModelReference.html",
    "title": "Class CreateModelReference | Bonsai.ML",
    "keywords": "Class CreateModelReference Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that creates a reference for a named model. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class CreateModelReference : INamedElement Inheritance object CreateModelReference Implements INamedElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets or sets the name of the model to reference. public string Name { get; set; } Property Value string Methods Process() Generates an observable sequence that contains the model reference object. public IObservable<ModelReference> Process() Returns IObservable<ModelReference> A sequence containing a single instance of the ModelReference class."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.DeserializeFromJson.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | Bonsai.ML",
    "keywords": "Class DeserializeFromJson Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() Initializes a new instance of the DeserializeFromJson class. public DeserializeFromJson() Properties Type Gets or sets the type of the object to deserialize. public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Forecast.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Forecast.html",
    "title": "Class Forecast | Bonsai.ML",
    "keywords": "Class Forecast Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator for converting forecasts from a Kalman Filter Kinematics python class into a list of forecasted results. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Forecast Inheritance object Forecast Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ForecastResults Gets or sets the list of forecast results. [JsonProperty(\"forecasts\")] public List<ForecastResult> ForecastResults { get; } Property Value List<ForecastResult> Methods Process(IObservable<PyObject>) Converts a PyObject representing a Kalman Filter forecast into a Forecast class representing a list of forecasted results. public IObservable<Forecast> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<Forecast>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.ForecastResult.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.ForecastResult.html",
    "title": "Class ForecastResult | Bonsai.ML",
    "keywords": "Class ForecastResult Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Forecast result representing a collection of forecasted states at future timesteps public class ForecastResult Inheritance object ForecastResult Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ForecastResult(KinematicState, TimeSpan) Initializes a new instance of the ForecastResult class. public ForecastResult(KinematicState kinematicState, TimeSpan timestep) Parameters kinematicState KinematicState The kinematic state of the forecasted result. timestep TimeSpan The future timestep of the forecasted result. Properties KinematicState Gets or privately sets the kinematic state of the forecasted result. public KinematicState KinematicState { get; } Property Value KinematicState Timestep Gets or privately sets the future time step of the forecasted result. public TimeSpan Timestep { get; } Property Value TimeSpan"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KFModelParameters.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KFModelParameters.html",
    "title": "Class KFModelParameters | Bonsai.ML",
    "keywords": "Class KFModelParameters Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Model parameters for a Kalman Filter Kinematics python class [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class KFModelParameters Inheritance object KFModelParameters Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors KFModelParameters() Initializes a new instance of the KFModelParameters class. public KFModelParameters() Properties Acc_x0 x acceleration at time 0 [JsonProperty(\"acc_x0\")] public double Acc_x0 { get; set; } Property Value double Acc_y0 x velocity at time 0 [JsonProperty(\"acc_y0\")] public double Acc_y0 { get; set; } Property Value double Fps frames per second [JsonProperty(\"fps\")] public int Fps { get; set; } Property Value int Pos_x0 x position at time 0 [JsonProperty(\"pos_x0\")] public double Pos_x0 { get; set; } Property Value double Pos_y0 y position at time 0 [JsonProperty(\"pos_y0\")] public double Pos_y0 { get; set; } Property Value double Sigma_a covariance of a [JsonProperty(\"sigma_a\")] public double Sigma_a { get; set; } Property Value double Sigma_x covariance of x [JsonProperty(\"sigma_x\")] public double Sigma_x { get; set; } Property Value double Sigma_y covariance of y [JsonProperty(\"sigma_y\")] public double Sigma_y { get; set; } Property Value double Sqrt_diag_V0_value v0 [JsonProperty(\"sqrt_diag_V0_value\")] public double Sqrt_diag_V0_value { get; set; } Property Value double Vel_x0 x velocity at time 0 [JsonProperty(\"vel_x0\")] public double Vel_x0 { get; set; } Property Value double Vel_y0 y velocity at time 0 [JsonProperty(\"vel_y0\")] public double Vel_y0 { get; set; } Property Value double Methods Process() Generates parameters for a Kalman Filter Kinematics Model public IObservable<KFModelParameters> Process() Returns IObservable<KFModelParameters> Process(IObservable<PyObject>) Gets the model parameters from a PyObject of a Kalman Filter Kinematics Model public IObservable<KFModelParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<KFModelParameters> Process<TSource>(IObservable<TSource>) Generates parameters for a Kalman Filter Kinematics Model on each input public IObservable<KFModelParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<KFModelParameters> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicComponent.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicComponent.html",
    "title": "Class KinematicComponent | Bonsai.ML",
    "keywords": "Class KinematicComponent Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll State components of a Kalman Filter Kinematics model public class KinematicComponent Inheritance object KinematicComponent Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Covariance covariance between state components [JsonProperty(\"covariance\")] public double Covariance { get; set; } Property Value double X x state component [JsonProperty(\"x_state_component\")] public StateComponent X { get; set; } Property Value StateComponent Y y state component [JsonProperty(\"y_state_component\")] public StateComponent Y { get; set; } Property Value StateComponent"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicState.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicState.html",
    "title": "Class KinematicState | Bonsai.ML",
    "keywords": "Class KinematicState Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that converts the full state of a Kalman filter model into a KinematicState class representing position, velocity, and acceleration. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class KinematicState Inheritance object KinematicState Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors KinematicState() Initializes a new instance of the KinematicState class public KinematicState() KinematicState(State) Initializes a new instance of the KinematicState class from the full state of a Kalman filter model. public KinematicState(State state) Parameters state State Properties Acceleration Gets or sets the acceleration kinematic component. [JsonProperty(\"acceleration\")] public KinematicComponent Acceleration { get; set; } Property Value KinematicComponent Position Gets or sets the position kinematic component. [JsonProperty(\"position\")] public KinematicComponent Position { get; set; } Property Value KinematicComponent Velocity Gets or sets the velocity kinematic component. [JsonProperty(\"velocity\")] public KinematicComponent Velocity { get; set; } Property Value KinematicComponent Methods Process(IObservable<State>) Converts the full state of a Kalman filter (mean vector and covariance matrix) into a KinematicState object representing position, velocity, and acceleration public IObservable<KinematicState> Process(IObservable<State> source) Parameters source IObservable<State> Returns IObservable<KinematicState>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Observation2D.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Observation2D.html",
    "title": "Class Observation2D | Bonsai.ML",
    "keywords": "Class Observation2D Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Observation2D of data used by Kalman Filter python class (point(x, y)) [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Observation2D Inheritance object Observation2D Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties X x coordinate [JsonProperty(\"x\")] public double X { get; set; } Property Value double Y y coordinate [JsonProperty(\"y\")] public double Y { get; set; } Property Value double Methods Process() Generates a 2D observation public IObservable<Observation2D> Process() Returns IObservable<Observation2D> Process<TSource>(IObservable<TSource>) Generates a 2D observation on each input public IObservable<Observation2D> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Observation2D> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.html",
    "title": "Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Classes Forecast Represents an operator for converting forecasts from a Kalman Filter Kinematics python class into a list of forecasted results. ForecastResult Forecast result representing a collection of forecasted states at future timesteps KFModelParameters Model parameters for a Kalman Filter Kinematics python class KinematicComponent State components of a Kalman Filter Kinematics model KinematicState Represents an operator that converts the full state of a Kalman filter model into a KinematicState class representing position, velocity, and acceleration. Observation2D Observation2D of data used by Kalman Filter python class (point(x, y))"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.GridParameters.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.GridParameters.html",
    "title": "Class GridParameters | Bonsai.ML",
    "keywords": "Class GridParameters Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that creates the 2D grid parameters used for calculating the PDF of a multivariate distribution. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class GridParameters Inheritance object GridParameters Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties X0 Gets or sets the lower bound of the X axis. [JsonProperty(\"x0\")] public double X0 { get; set; } Property Value double X1 Gets or sets the upper bound of the X axis. [JsonProperty(\"x1\")] public double X1 { get; set; } Property Value double XSteps Gets or sets the number of steps along the X axis. [JsonProperty(\"xsteps\")] public int XSteps { get; set; } Property Value int Y0 Gets or sets the lower bound of the Y axis. [JsonProperty(\"y0\")] public double Y0 { get; set; } Property Value double Y1 Gets or sets the upper bound of the Y axis. [JsonProperty(\"y1\")] public double Y1 { get; set; } Property Value double YSteps Gets or sets the number of steps along the Y axis. [JsonProperty(\"ysteps\")] public int YSteps { get; set; } Property Value int Methods ConvertPyObject(PyObject) Converts a PyObject, represeting a Kalman Filter Linear Regression Model, into a GridParameters object public static GridParameters ConvertPyObject(PyObject pyObject) Parameters pyObject PyObject Returns GridParameters Process() Generates grid parameters public IObservable<GridParameters> Process() Returns IObservable<GridParameters> Process(IObservable<PyObject>) Gets the grid parameters from a PyObject of a Kalman Filter Linear Regression Model public IObservable<GridParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<GridParameters> Process<TSource>(IObservable<TSource>) Generates grid parameters on each input public IObservable<GridParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<GridParameters> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.KFModelParameters.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.KFModelParameters.html",
    "title": "Class KFModelParameters | Bonsai.ML",
    "keywords": "Class KFModelParameters Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that creates the model parameters for a Kalman Filter Linear Regression python class [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class KFModelParameters Inheritance object KFModelParameters Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors KFModelParameters() Constructs a KF Model Parameters class. public KFModelParameters() Properties LikelihoodPrecisionCoefficient Gets or sets the likelihood precision coefficient. [JsonProperty(\"likelihood_precision_coef\")] public double LikelihoodPrecisionCoefficient { get; set; } Property Value double NumFeatures Gets or sets the number of features present in the model. [JsonProperty(\"n_features\")] public int NumFeatures { get; set; } Property Value int P Gets or sets the matrix representing the covariance between state components. [JsonProperty(\"P\")] public double[,] P { get; set; } Property Value double[,] PriorPrecisionCoefficient Gets or sets the prior precision coefficient. [JsonProperty(\"prior_precision_coef\")] public double PriorPrecisionCoefficient { get; set; } Property Value double X Gets or sets the matrix representing the mean of the state. [JsonProperty(\"x\")] public double[,] X { get; set; } Property Value double[,] Methods Process() Generates parameters for a Kalman Filter Linear Regression Model public IObservable<KFModelParameters> Process() Returns IObservable<KFModelParameters> Process(IObservable<PyObject>) Gets the model parameters from a PyObject of a Kalman Filter Linear Regression Model public IObservable<KFModelParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<KFModelParameters> Process<TSource>(IObservable<TSource>) Generates parameters for a Kalman Filter Linear Regression Model on each input public IObservable<KFModelParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<KFModelParameters> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.MultivariatePDF.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.MultivariatePDF.html",
    "title": "Class MultivariatePDF | Bonsai.ML",
    "keywords": "Class MultivariatePDF Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that converts a python object, representing a multivariate PDF, into a multivariate PDF class. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class MultivariatePDF Inheritance object MultivariatePDF Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields GridParameters Gets or sets the grid parameters used for generating the multivariate PDF. public GridParameters GridParameters Field Value GridParameters Values Gets or sets the probability density value at each 2D position of the grid. public double[,] Values Field Value double[,] Methods Process(IObservable<PyObject>) Converts a PyObject into a multivariate PDF. public IObservable<MultivariatePDF> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<MultivariatePDF>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.html",
    "title": "Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Classes GridParameters Represents an operator that creates the 2D grid parameters used for calculating the PDF of a multivariate distribution. KFModelParameters Represents an operator that creates the model parameters for a Kalman Filter Linear Regression python class MultivariatePDF Represents an operator that converts a python object, representing a multivariate PDF, into a multivariate PDF class."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.ModelReference.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.ModelReference.html",
    "title": "Class ModelReference | Bonsai.ML",
    "keywords": "Class ModelReference Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Bonsai LDS model reference base class public class ModelReference Inheritance object ModelReference Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ModelReference(string) Initializes a new instance of the ModelReference class with the specified name. public ModelReference(string name) Parameters name string The name of the referenced model. Properties Name Gets or sets the name of the referenced model. public string Name { get; set; } Property Value string"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Reshape.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Reshape.html",
    "title": "Class Reshape | Bonsai.ML",
    "keywords": "Class Reshape Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that reshapes the dimensions of a 2D multi-dimensional array. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Reshape Inheritance object Reshape Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Cols Gets or sets the number of columns in the reshaped array. public int Cols { get; set; } Property Value int Rows Gets or sets the number of rows in the reshaped array. public int Rows { get; set; } Property Value int Methods Process(IObservable<double[,]>) Reshapes a 2D multi-dimensional array into a new multi-dimensional array with the provided number of rows and columns. public IObservable<double[,]> Process(IObservable<double[,]> source) Parameters source IObservable<double[,]> Returns IObservable<double[,]>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.SerializeToJson.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.SerializeToJson.html",
    "title": "Class SerializeToJson | Bonsai.ML",
    "keywords": "Class SerializeToJson Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<KFModelParameters>) Serializes each KFModelParameters object in the sequence to a JSON string. public IObservable<string> Process(IObservable<KFModelParameters> source) Parameters source IObservable<KFModelParameters> A sequence of KFModelParameters objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding KFModelParameters object. Process(IObservable<KinematicComponent>) Serializes each KinematicComponent object in the sequence to a JSON string. public IObservable<string> Process(IObservable<KinematicComponent> source) Parameters source IObservable<KinematicComponent> A sequence of KinematicComponent objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding KinematicComponent object. Process(IObservable<KinematicState>) Serializes each KinematicState object in the sequence to a JSON string. public IObservable<string> Process(IObservable<KinematicState> source) Parameters source IObservable<KinematicState> A sequence of KinematicState objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding KinematicState object. Process(IObservable<Observation2D>) Serializes each Observation2D object in the sequence to a JSON string. public IObservable<string> Process(IObservable<Observation2D> source) Parameters source IObservable<Observation2D> A sequence of Observation2D objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding Observation2D object. Process(IObservable<KFModelParameters>) public IObservable<string> Process(IObservable<KFModelParameters> source) Parameters source IObservable<KFModelParameters> Returns IObservable<string> Process(IObservable<StateComponent>) Serializes each StateComponent object in the sequence to a JSON string. public IObservable<string> Process(IObservable<StateComponent> source) Parameters source IObservable<StateComponent> A sequence of StateComponent objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding StateComponent object. Process(IObservable<State>) Serializes each State object in the sequence to a JSON string. public IObservable<string> Process(IObservable<State> source) Parameters source IObservable<State> A sequence of State objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding State object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Slice.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Slice.html",
    "title": "Class Slice | Bonsai.ML",
    "keywords": "Class Slice Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that slices a 2D multi-dimensional array. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Slice Inheritance object Slice Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ColEnd Gets or sets the index to stop slicing the columns of the array. A value of null indicates the last column of the array. public int? ColEnd { get; set; } Property Value int? ColStart Gets or sets the index to begin slicing the columns of the array. A value of null indicates the first column of the array. public int? ColStart { get; set; } Property Value int? RowEnd Gets or sets the index to stop slicing the rows of the array. A value of null indicates the last row of the array. public int? RowEnd { get; set; } Property Value int? RowStart Gets or sets the index to begin slicing the rows of the array. A value of null indicates the first row of the array. public int? RowStart { get; set; } Property Value int? Methods Process(IObservable<double[,]>) Slices a 2D multi-dimensional array into a new multi-dimensional array by extracting elements between the provided start and end indices of the rows and columns. public IObservable<double[,]> Process(IObservable<double[,]> source) Parameters source IObservable<double[,]> Returns IObservable<double[,]>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.State.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.State.html",
    "title": "Class State | Bonsai.ML",
    "keywords": "Class State Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll State of a Kalman Filter (mean vector and covariance matrix) [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class State Inheritance object State Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties P Covariance matrix - n x n dimensional matrix where n is number of features [JsonProperty(\"P\")] public double[,] P { get; set; } Property Value double[,] X Mean vector - n x 1 dimensional matrix where n is number of features [JsonProperty(\"x\")] public double[,] X { get; set; } Property Value double[,] Methods Process(IObservable<PyObject>) Grabs the state of a Kalman Filter from a type of PyObject /// public IObservable<State> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<State>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.StateComponent.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.StateComponent.html",
    "title": "Class StateComponent | Bonsai.ML",
    "keywords": "Class StateComponent Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll State component of a Kalman Filter public class StateComponent Inheritance object StateComponent Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors StateComponent() Initializes a new instance of the StateComponent class. public StateComponent() StateComponent(double[,], double[,], int) Initializes a new instance of the StateComponent class from the full state and covariance matrices given an index public StateComponent(double[,] X, double[,] P, int i) Parameters X double[,] P double[,] i int Properties Mean mean [JsonProperty(\"mean\")] public double Mean { get; set; } Property Value double Variance variance [JsonProperty(\"variance\")] public double Variance { get; set; } Property Value double Methods Process() Generates a state component public IObservable<StateComponent> Process() Returns IObservable<StateComponent> Process<TSource>(IObservable<TSource>) Generates a state component public IObservable<StateComponent> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<StateComponent> Type Parameters TSource"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.html",
    "title": "Namespace Bonsai.ML.LinearDynamicalSystems | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.LinearDynamicalSystems Classes CreateModelReference Represents an operator that creates a reference for a named model. DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. ModelReference Bonsai LDS model reference base class Reshape Represents an operator that reshapes the dimensions of a 2D multi-dimensional array. SerializeToJson Serializes a sequence of data model objects into JSON strings. Slice Represents an operator that slices a 2D multi-dimensional array. State State of a Kalman Filter (mean vector and covariance matrix) StateComponent State component of a Kalman Filter"
  },
  "api/Bonsai.ML.Visualizers.ForecastImageOverlay.html": {
    "href": "api/Bonsai.ML.Visualizers.ForecastImageOverlay.html",
    "title": "Class ForecastImageOverlay | Bonsai.ML",
    "keywords": "Class ForecastImageOverlay Namespace Bonsai.ML.Visualizers Assembly Bonsai.ML.Visualizers.dll Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model overtime of an ImageMashupVisualizer. public class ForecastImageOverlay : DialogTypeVisualizer Inheritance object DialogTypeVisualizer ForecastImageOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.Visualizers.ForecastPlotOverlay.html": {
    "href": "api/Bonsai.ML.Visualizers.ForecastPlotOverlay.html",
    "title": "Class ForecastPlotOverlay | Bonsai.ML",
    "keywords": "Class ForecastPlotOverlay Namespace Bonsai.ML.Visualizers Assembly Bonsai.ML.Visualizers.dll Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model overtime of a KinematicStateVisualizer. public class ForecastPlotOverlay : DialogTypeVisualizer Inheritance object DialogTypeVisualizer ForecastPlotOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.Visualizers.ForecastVisualizer.html": {
    "href": "api/Bonsai.ML.Visualizers.ForecastVisualizer.html",
    "title": "Class ForecastVisualizer | Bonsai.ML",
    "keywords": "Class ForecastVisualizer Namespace Bonsai.ML.Visualizers Assembly Bonsai.ML.Visualizers.dll Provides a type visualizer to display the forecast of a Kalman Filter kinematics model. public class ForecastVisualizer : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer ForecastVisualizer Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.Show(DateTime, object) BufferedVisualizer.TargetInterval DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.Visualizers.KinematicStateVisualizer.html": {
    "href": "api/Bonsai.ML.Visualizers.KinematicStateVisualizer.html",
    "title": "Class KinematicStateVisualizer | Bonsai.ML",
    "keywords": "Class KinematicStateVisualizer Namespace Bonsai.ML.Visualizers Assembly Bonsai.ML.Visualizers.dll Provides a type visualizer to display the state components of a Kalman Filter Kinematics model. public class KinematicStateVisualizer : MashupVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer KinematicStateVisualizer Inherited Members MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) public void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> Unload() Unloads all type visualizer resources. public override void Unload() Visualize(IObservable<IObservable<object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters source IObservable<IObservable<object>> An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns IObservable<object> An observable sequence where every notification updates the type visualizer object in the UI thread."
  },
  "api/Bonsai.ML.Visualizers.MultidimensionalArrayVisualizer.html": {
    "href": "api/Bonsai.ML.Visualizers.MultidimensionalArrayVisualizer.html",
    "title": "Class MultidimensionalArrayVisualizer | Bonsai.ML",
    "keywords": "Class MultidimensionalArrayVisualizer Namespace Bonsai.ML.Visualizers Assembly Bonsai.ML.Visualizers.dll Provides a type visualizer to display the state components of a Kalman Filter kinematics model. public class MultidimensionalArrayVisualizer : DialogTypeVisualizer Inheritance object DialogTypeVisualizer MultidimensionalArrayVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties PaletteSelectedIndex Gets or sets the selected index of the color palette to use. public int PaletteSelectedIndex { get; set; } Property Value int RenderMethodSelectedIndex Gets or sets the selected index of the render method to use. public int RenderMethodSelectedIndex { get; set; } Property Value int Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.Visualizers.MultivariatePDFVisualizer.html": {
    "href": "api/Bonsai.ML.Visualizers.MultivariatePDFVisualizer.html",
    "title": "Class MultivariatePDFVisualizer | Bonsai.ML",
    "keywords": "Class MultivariatePDFVisualizer Namespace Bonsai.ML.Visualizers Assembly Bonsai.ML.Visualizers.dll Provides a type visualizer to display the state components of a Kalman Filter kinematics model. public class MultivariatePDFVisualizer : DialogTypeVisualizer Inheritance object DialogTypeVisualizer MultivariatePDFVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties PaletteSelectedIndex Gets or sets the selected index of the color palette to use. public int PaletteSelectedIndex { get; set; } Property Value int RenderMethodSelectedIndex Gets or sets the selected index of the render method to use. public int RenderMethodSelectedIndex { get; set; } Property Value int Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.Visualizers.StateComponentVisualizer.html": {
    "href": "api/Bonsai.ML.Visualizers.StateComponentVisualizer.html",
    "title": "Class StateComponentVisualizer | Bonsai.ML",
    "keywords": "Class StateComponentVisualizer Namespace Bonsai.ML.Visualizers Assembly Bonsai.ML.Visualizers.dll Provides a type visualizer to display the state components of a Kalman Filter kinematics model. public class StateComponentVisualizer : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer StateComponentVisualizer Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AreaSeriesColor Gets or sets the color to use for the area series. public OxyColor? AreaSeriesColor { get; set; } Property Value OxyColor? BufferData Gets or sets a boolean value that determines whether to buffer the data beyond the capacity. public bool BufferData { get; set; } Property Value bool Capacity Gets or sets the amount of time in seconds that should be shown along the x axis. public int Capacity { get; set; } Property Value int Label Gets or sets the optional label to prepend to the line and area series names. public string Label { get; set; } Property Value string LineSeriesColor Gets or sets the color to use for the line series. public OxyColor? LineSeriesColor { get; set; } Property Value OxyColor? Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.Visualizers.html": {
    "href": "api/Bonsai.ML.Visualizers.html",
    "title": "Namespace Bonsai.ML.Visualizers | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.Visualizers Classes ForecastImageOverlay Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model overtime of an ImageMashupVisualizer. ForecastPlotOverlay Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model overtime of a KinematicStateVisualizer. ForecastVisualizer Provides a type visualizer to display the forecast of a Kalman Filter kinematics model. KinematicStateVisualizer Provides a type visualizer to display the state components of a Kalman Filter Kinematics model. MultidimensionalArrayVisualizer Provides a type visualizer to display the state components of a Kalman Filter kinematics model. MultivariatePDFVisualizer Provides a type visualizer to display the state components of a Kalman Filter kinematics model. StateComponentVisualizer Provides a type visualizer to display the state components of a Kalman Filter kinematics model."
  },
  "articles/LinearDynamicalSystems/lds-getting-started.html": {
    "href": "articles/LinearDynamicalSystems/lds-getting-started.html",
    "title": "Getting Started | Bonsai.ML",
    "keywords": "Getting Started This guide shows you how to use the environments created in the previous installation steps to run the package. Depending on your operating system, follow the activating environments in Windows or activating environments in Linux instructions below. Warning These environments are not configured to run the example workflows. To run the examples, you must install the necessary packages or follow the Examples getting started guide to bootstrap the environments directly from the repo provided. Activating environments - Windows Activate the python environment and launch the Bonsai.exe inside the bonsai environment folder using the following: .venv\\Scripts\\activate .bonsai\\Bonsai.exe Activating environments - Linux If you used the Linux environment creation tool, you can activate you bonsai environment the same as you would activate your python virtual environment. You can have both the python and the bonsai environments activated at the same time. Warning The order of activating the environments matters so you must activate the python environment first and the bonsai environment second. source .venv/bin/activate source .bonsai/activate bonsai If you did not use the linux environment template but you plan on using linux, you can simply activate the python environment and then run the bonsai application in the folder using mono. source .venv/bin/activate mono .bonsai/Bonsai.exe General workflow The workflow starts with creating a python runtime, followed by loading the lds_python module. After this, you can instantiate the model and pass it observations of data to perform inference. flowchart LR A([\"Create Python Runtime\"]) B([\"Load LDS Module\"]) C([\"Create KF Model\"]) D([\"Generate Observations\"]) E([\"Perform Inference\"]) A --> B B --> C C --> D D --> E Note Due to the way Bonsai.ML interacts with Python, it is necessary for the first two steps to complete before instantiating the model. It is important to know that the initialization of the Python runtime, loading the module, and creating the model takes time to complete, and that only once the model has been created can inference be performed. Implementing in Bonsai Below is a simplified Bonsai workflow that implements the core logic of the package. A CreateRuntime node is used to initialize a python runtime engine, which gets passed to a BehaviorSubject called PythonEngine. Bonsai's CreateRuntime node should automatically detect the python virtual environment that was used to launch the Bonsai application, otherwise the path to the virtual environment can be specified in the CreateRuntime node by setting the PythonHome property. Next, the PythonEngine node is passed to a LoadLDSModule node which will load the lds_python package into the python environment. Once the LDS module has been initialized, the CreateKFModel node instantiates a python instance of the Kalman Filter Kinematics model. Here, you can specify the initialization parameters of the model and provide a ModelName parameter that gets used to reference the model in other parts of the Bonsai workflow. Next, you would take some tracking data (for example, the centroid of an animal or a 2D point), and pass that to a CreateObservation2D node which will package the data into a data format that the model can use. The Observation is then passed to a PerformInference node, which will use the specified model (given by the ModelName property) to infer the state and output the inferred kinematics. The only thing left to do is pass your behavior data into the BehaviorData subject. To do this, simply connect the output of your 2D data to a Subject named BehaviorData and the model will start converting this data into observations which it can then us to perform inference. Setting model parameters The CreateKFModel node contains a number of properties which can be useful to determine the model dynamics. Further Examples For further examples and demonstrations for how this package works, see the Bonsai - Machine Learning Examples section."
  },
  "articles/LinearDynamicalSystems/lds-installation-guide-linux.html": {
    "href": "articles/LinearDynamicalSystems/lds-installation-guide-linux.html",
    "title": "Installation Guide - Linux | Bonsai.ML",
    "keywords": "Installation Guide - Linux This guide is meant for users to install the package from scratch. To use this package to run the examples, you must install the additional Bonsai packages required to run each Example. Some familiarity with the terminal is necessary. Notes on Installing Bonsai on Linux (Ubuntu) Bonsai on Linux is not as straightforward as installing on Windows and is still being actively tested and optimized. Currently, Bonsai support has only been tested on Ubuntu 22.04. If you wish to try Bonsai on Linux, be sure to read the Linux Installation Guide for important information regarding how to install underlying Bonsai packge dependencies, such as OpenGL, OpenAL, OpenCV, etc., for use in Bonsai workflows. Dependencies To get started, you must install the following tools: Python (v3.10.12) dotnet-sdk (v8) Git Bonsai-Rx Linux Environment Template Warning Be sure to check the python version and dotnet-sdk version to make sure you have the correct version of the tool installed, otherwise the steps in this guide may not work. Creating Virtual Environments Create a folder for your project cd ~/Desktop mkdir LinearDynamicalSystems cd LinearDynamicalSystems Create a python virtual environment. Warning This step uses the virtual env package from python to create a virtual environment. If you run into an error during this step, you may have to install the python virtual env package with sudo apt install python3.10-venv. python3 -m venv .venv Create a bonsai environment. Note This step uses the bonsai linux environment template tool for easy creation of linux environments dotnet new bonsaienvl When prompted, enter yes to run the powershell setup script. Python Environment Setup Guide Activate the python environment source .venv/bin/activate Install the lds_python package pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c If you encounter errors during installation of the lds_python package, you will have to diagnose the issue and install the correct package dependencies manually. Check that the lds_python package has been installed correctly. Launch a python IDE: python Check that you can correctly import the package: import lds If no errors appear when import lds is called in python, your python environment is ready. Exit python with the following command and move onto the next step: exit() Bonsai Environment Setup Guide Activate the bonsai environment and launch bonsai: source .bonsai/activate bonsai Open Bonsai's Package Manager from the startup menu and install the Bonsai.ML.LinearDynamicalSystems bonsai package from the menu. When installing the package, make sure to enter Accept on the prompts when asked to accept Terms and Conditions during installation. You will now have access to Bonsai.ML.LinearDynamicalSystems modules from the Bonsai toolbox. If all of these steps worked for you, head to the section on Getting Started."
  },
  "articles/LinearDynamicalSystems/lds-installation-guide-windows.html": {
    "href": "articles/LinearDynamicalSystems/lds-installation-guide-windows.html",
    "title": "Installation Guide - Windows | Bonsai.ML",
    "keywords": "Installation Guide - Windows This guide is meant for users to install the package from scratch. To run the examples, users must install the additional Bonsai packages required to run each Example. Some familiarity with the command line or powershell terminal is necessary. This guide has only been tested on Windows 10 and 11, so earlier versions of Windows may or may not work. Dependencies To get started, you must install the following tools: Python (v3.10) Note - in order for Bonsai to pick up the python installation, it must be installed through the standard Windows installer (not through the Windows App store) and must be added to the system PATH dotnet-sdk (v8) Git Bonsai-Rx Templates tool Microsoft Visual C++ Redistributable Warning Be sure to check the specific python version and dotnet-sdk version you have installed, as different version than the ones we recommend may or may not work with this guide. Creating Virtual Environments Open up the terminal and create a folder for your project. For example: cd ~\\Desktop mkdir LinearDynamicalSystems cd .\\LinearDynamicalSystems Create a python virtual environment inside of your folder. python -m venv .venv Tip If receive an error that says, python cannot be found, check to ensure that python is available on the system path. If you just installed python, it may be necessary to restart the terminal. Create a bonsai environment. When prompted, enter yes to run the powershell setup script. dotnet new bonsaienv Tip If you get an error during this step which says, Setup.ps1 cannot be loaded because running scripts is disabled, you need to allow powershell scripts to be executed by users. To do this, you can change the global execution policy by opening a new powershell instance with Run as Administrator and use the following command: set-executionpolicy remotesigned Alternatively, you can use the Setup.cmd file to setup the bonsai environment without changing the execution policy globally. Run the file by going to the terminal and running: .\\.bonsai\\Setup.cmd Python Environment Setup Guide Activate the python environment .\\.venv\\Scripts\\activate Install the lds_python package pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c If you encounter errors during installation of the lds_python package, you will have to diagnose the issue and install the correct package dependencies manually. Check that the lds_python package has been installed correctly. Launch a python IDE: python Check that you can correctly import the package: import lds If no errors appear when import lds is called in python, your python environment is ready. Exit python with the following command: exit() Move onto the next step. Bonsai Environment Setup Guide Launch bonsai: .bonsai\\Bonsai.exe Open Bonsai's Package Manager from the startup menu and install the Bonsai.ML.LinearDynamicalSystems bonsai package from the menu. When installing the package, make sure to enter Accept on the prompts when asked to accept Terms and Conditions during installation. You will now have access to Bonsai.ML.LinearDynamicalSystems modules from the Bonsai toolbox. If all of these steps worked for you, head to the section on Getting Started."
  },
  "articles/LinearDynamicalSystems/lds-overview.html": {
    "href": "articles/LinearDynamicalSystems/lds-overview.html",
    "title": "Overview | Bonsai.ML",
    "keywords": "Overview The LinearDynamicalSystems package provides a Bonsai interface to interact with the lds_python package. General Guide Since the package relies on Bonsai and python, both Bonsai and Python installation steps are required. We provide detailed instructions for installing the package in a new environment, for example when adding the package to existing workflows, and seperately provide documentation for how to install/run examples which can be bootstrapped directly from the example folder. To install the package for integrating with existing workflows, see the Installation Guide - Windows or the Installation Guide - Linux sections for more information. To head directly to integrating the package into workflows, see the Getting Started section. To test the specific examples provided, check out the Examples tab."
  },
  "bonsai/README.html": {
    "href": "bonsai/README.html",
    "title": "docfx-tools | Bonsai.ML",
    "keywords": "docfx-tools A repository of docfx tools for Bonsai package documentation: Docfx Workflow Container template patching the modern template to provide stylesheets and scripts for rendering custom workflow containers with copy functionality. Docfx API TOC template that groups nodes by operator type in the table of contents(TOC) on API pages. Powershell Scripts that automate several content generation steps for package documentation websites. How to include To include this repo in a docfx website, first clone this repository as a submodule: git submodule add https://github.com/bonsai-rx/docfx-tools bonsai Using Workflow Container Template Modify docfx.json to include the template immediately after the modern template: \"template\": [ \"default\", \"modern\", \"bonsai/template\", \"template\" ], Finally, import and call the modules inside your website template/public folder. main.css @import \"workflow.css\"; main.js import WorkflowContainer from \"./workflow.js\" export default { start: () => { WorkflowContainer.init(); } } Using API TOC Template The local installation of docfx needs to be updated to >= v2.77.0. dotnet tool update docfx Modify docfx.json to include the api template (note both the workflow container and API TOC template have to be added separately). \"template\": [ \"default\", \"modern\", \"bonsai/template\", \"bonsai/template/api\", \"template\" ] Powershell Scripts - Exporting workflow images Exporting SVG images for all example workflows can be automated by placing all .bonsai files in a workflows folder and calling the below script pointing to the bin directory to include. A bonsai environment is assumed to be available in the .bonsai folder in the repository root. .\\modules\\Export-Image.ps1 \"..\\src\\PackageName\\bin\\Release\\net472\""
  },
  "examples/README.html": {
    "href": "examples/README.html",
    "title": "Bonsai.ML - Examples | Bonsai.ML",
    "keywords": "Bonsai.ML - Examples The Bonsai.ML project is a collection of packages built to target the Bonsai-Rx ecosystem, providing reactive infrastructure for machine learning operations. In the Bonsai.ML - Examples repo, we provide example workflows, datasets, and demos for how to get started using the suite of Bonsai.ML packages that are currently available. We provide documentation for each example to illustrate how Bonsai.ML can be incorporated into Bonsai workflows. For each Bonsai.ML package, check out the Getting Started page to learn more about how to run the example workflows yourself. Datasets All of the datasets used in these examples can be found by going to: https://doi.org/10.5281/zenodo.10629221. ZebrafishExampleVid.avi - provided by Nicholas Guilbeault in the Thiele lab at the University of Toronto. If you would like to refer to this data, please cite Guilbeault, N.C., Guerguiev, J., Martin, M. et al. (2021). BonZeb: open-source, modular software tools for high-resolution zebrafish tracking and analysis. Scientific Reports 11, 8148, https://doi.org/10.1038/s41598-021-85896-x. ForagingMouseExampleVid.avi - provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 ReceptiveFieldSimpleCell.zip - provided by the authors of \"Touryan, J., Felsen, G., & Dan, Y. (2005). Spatial structure of complex cell receptive fields measured with natural images. Neuron, 45(5), 781-791.\" https://doi.org/10.1016/j.neuron.2005.01.029 Acknowledgements Development of this package was supported by funding from the Biotechnology and Biological Sciences Research Council [grant number BB/W019132/1]."
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ForagingMouse/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ForagingMouse/README.html",
    "title": "Foraging Mouse Example | Bonsai.ML",
    "keywords": "Foraging Mouse Example The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used to infer the kinematics of a mouse behaving in a foraging arena. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.1.0 Bonsai - ML LinearDynamicalSystems v0.1.0 Bonsai - ML Visualizers v0.1.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video for this example was generously provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 You can download the ForagingMouseExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the MouseTracking group node to point to the correct location. Workflow Below is the workflow for inferring kinematics of a mouse during a foraging task. In this example, a Kalman Filter is used to infer the position, velocity, and acceleration of the freely moving mouse. The frames per second of the video is 50 Hz, so we set the Fps property of the CreateKFModel node to 50. The workflow performs centroid tracking inside of the MouseTracking group node, which uses a standard image analysis pipeline to extract the Centroid of the animal. The Centroid data is then converted into a type of Observation2D that the model then uses to perform inference using the PerformInference node. Since the tracking pipeline takes some time to initialize, we wait to create the kalman filter using the SubscribeWhen node only once TrackingStarted has produced a value, which is conditioned on centroid != NaN. To visualize the inferred position, velocity, and acceleration kinematics, the MouseKinematicsVisualizer node positioned at the bottom of the workflow can be openned while the workflow is running. On the left, you should see the inferred position, velocity and acceleration (top to bottom), with the ability to select which state component (X or Y) you want to visualize from the dropdown menu on the top right corner of the graph. Both the mean (dark blue) and variance (light blue shading) of the inferred state component are visualized. On the right, you should see the video playing with the tracking data (blue) and inferred position (red) overlaid. The workflow should look like this:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ForecastingForagingMouse/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ForecastingForagingMouse/README.html",
    "title": "Forecasting Foraging Mouse Example | Bonsai.ML",
    "keywords": "Forecasting Foraging Mouse Example The code for this repo can be found here. In the following example, you can see how the Kalman Filter can be use to forecast the future kinematics of a mouse behaving in a foraging arena. This example is an extension to the Foraging Mouse example with the addition of performing forecasting. Dependencies If you used the environment bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.2.0 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video for this example was generously provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 You can download the ForagingMouseExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the MouseTracking group node to point to the correct location. Workflow The workflow is similar to the workflow used to infer the kinematics of a mouse during foraging (see example here)[https://github.com/bonsai-rx/machinelearning-examples/tree/main/examples/LinearDynamicalSystems/Kinematics/ForagingMouse] with the addition of a few nodes to forecast the future kinematics of the mouse. You can find specific information about the tracking workflow and model inference workflow by going to the Foraging Mouse example. In addition to the tracking workflow and model inference, only a few nodes are needed to perform optimization of the models parameters. Following the PerformInference node, which sends notifications to the InferredKinematics subject, the PerformForecasting node is used to make predictions about the kinematics of the mouse for a certain number of steps into the future, defined by the Timesteps property. The output of PerformForecasting is a type of Forecast, which contains a list of ForecastResult corresponding the predicted KinematicState at each timestep. The Forecast can be visualized alongside the existing data by opening up the ForecastVisualizer group node, like so:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ModelOptimizationForagingMouse/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ModelOptimizationForagingMouse/README.html",
    "title": "Optimizing Model Parameters for Foraging Mouse Example | Bonsai.ML",
    "keywords": "Optimizing Model Parameters for Foraging Mouse Example The code for this repo can be found here. In the following example, you can see how the parameters of the Kalman Filter can be automatically optimized to infer the kinematics of a mouse behaving in a foraging arena. This example is an extension to the Foraging Mouse example in which the parameters of the model are optimized by learning the parameters of the model over small batches of training data. Dependencies If you used the environment bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.2.0 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video for this example was generously provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 You can download the ForagingMouseExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the MouseTracking group node to point to the correct location. Workflow Below is the workflow. It is similar to the workflow that was used to infer the kinematics of a mouse during foraging (see example here)[https://github.com/bonsai-rx/machinelearning-examples/tree/main/examples/LinearDynamicalSystems/Kinematics/ForagingMouse] with the addition of a few nodes that will run optimization of the models parameters over small batches of data that are collected continuously. You can find specific information about the tracking workflow and model inference workflow by going to the Foraging Mouse example. In addition to the tracking workflow and model inference, only a few nodes are needed to perform optimization of the models parameters. There is a specific branch of the workflow where the Observation subject is subscribed to after the ModelParams fires, and gets passed to a RunOptimization node. This node has a number of properties which me be useful, such as the batch size of the training data, which parameters to optimize, etc. Once the data buffer is full, the model runs optimization asynchronously. You should see in the beginning that the model will tend to overshoot the position of the mouse, since the parameters are not well adjusted. Over time, the output of the model will improve and the inference of the model will more closely track the position of the mouse with multiple learning iterations. The easiest way to observe the effects that optimizing the models parameters has on the models output is to compare the outputs between a model that undergoes optimization and an identical model that retains its initial parameters. With each iteration, the optimized model will diverge from the unoptimized model and more closely track the position of the mouse. This is what you would see:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/SimulatedData/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/SimulatedData/README.html",
    "title": "Simulated Data | Bonsai.ML",
    "keywords": "Simulated Data The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used for kinematic inference using simulated data. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.1.0 Bonsai - ML LinearDynamicalSystems v0.1.0 Bonsai - ML Visualizers v0.1.0 Bonsai - Numerics v0.9.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - System v2.8.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.0 Workflow Below is the workflow for running the Kalman Filter Kinematics model on simulated data. In this example, we created a Kalman Filter for infering kinematics from simulated data. We created a property called SamplingFrequency which dictates both the time step parameter of our model and also determines the rate at which the new simulated data values are generated. At each time step, the Timer inside the SimulatedData group workflow emits a new value which increments by 1. This value is then transformed by the Sin and Cos functions to generate points along the circumference of a circle. Noise is added to the values by sampling from a normal distribution and the output of this gets scaled and transformed to map onto pixel coordinates in an image of size 500 x 500. These values are then converted into observations that are then passed to the model to perform inference. To see the inferred kinematics of the model, double click on the SimulatedDataVisualizer node at the bottom of the workflow while it is running to open up the visualizer. On the left, you should see the inferred position, velocity and acceleration (top to bottom), with the ability to select which state component (X or Y) you want to visualize from the dropdown menu on the top right corner of the graph. Both the mean (dark blue) and variance (light blue shading) of the inferred state component are visualized. On the right, you should see an image representing the location of each new observation (blue) along with the inferred position of the model over time (red). The window should look similar to this:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ZebrafishCentroidTracking/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ZebrafishCentroidTracking/README.html",
    "title": "Zebrafish Centroid Tracking | Bonsai.ML",
    "keywords": "Zebrafish Centroid Tracking The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used to infer the kinematics of a freely swimming juvenille zebrafish. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.1.0 Bonsai - ML LinearDynamicalSystems v0.1.0 Bonsai - ML Visualizers v0.1.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video in this dataset was provided by Nicholas Guilbeault in the Thiele lab at the University of Toronto and published as part of Guilbeault, N.C., Guerguiev, J., Martin, M. et al. BonZeb: open-source, modular software tools for high-resolution zebrafish tracking and analysis. Sci Rep 11, 8148 (2021). https://doi.org/10.1038/s41598-021-85896-x. You can download the ZebrafishExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the ZebrafishTracking group node to point to the correct location. Workflow Below is the workflow for inferring kinematics of zebrafish swimming. In this example, a Kalman Filter is used to infer the position, velocity, and acceleration of a freely swimming zebrafish. The original video was collected at 200 Hz, so the Fps property of the CreateKFModel node is set to 200. The workflow works by performing centroid tracking inside of the ZebrafishTracking node, which performs image analyses to extract the Centroid of the zebrafish. The Centroid data is then converted into a type of Observation2D that the model then uses to perform inference using the PerformInference node. Since the tracking pipeline takes some time to initialize, we wait to create the kalman filter using the SubscribeWhen node only once TrackingStarted has produced a value, which is conditioned on centroid != NaN. To visualize the inferred position, velocity, and acceleration kinematics, double click on the ZebrafishKinematicsVisualizer node at the bottom of the workflow while it is running to open up the visualizer. On the left, you should see the inferred position, velocity and acceleration (top to bottom), with the ability to select which state component (X or Y) you want to visualize from the dropdown menu on the top right corner of the graph. Both the mean (dark blue) and variance (light blue shading) of the inferred state component are visualized. On the right, you should see the video of the zebrafish playing, with the original tracking data (blue) and inferred position (red) overlaid. The window should look similar to this:"
  },
  "examples/examples/LinearDynamicalSystems/LinearRegression/ReceptiveFieldSimpleCell/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/LinearRegression/ReceptiveFieldSimpleCell/README.html",
    "title": "Receptive Field Simple Cell | Bonsai.ML",
    "keywords": "Receptive Field Simple Cell The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used to estimate the linear receptive field of a simple cell recorded from V1 of an anaesthetised cat. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - System v2.8.1 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Dataset The data for this example was generously provided by the authors of \"Touryan, J., Felsen, G., & Dan, Y. (2005). Spatial structure of complex cell receptive fields measured with natural images. Neuron, 45(5), 781-791.\" You can download the ReceptiveFieldSimpleCell.zip dataset here: https://doi.org/10.5281/zenodo.10629221. It consists of 2 csv files: one which contains the all 144 pixel values of the 12 x 12 images for each timepoint, and one which contains the binned spike counts for a single neuron. Once downloaded, you will need to extract the contents of the zip file into the datasets folder. Workflow Below is the example workflow for how to perform online estimation of the receptive field of a simple visual neuron. In the workflow, we use previously acquired data and read the values sequentially, but this workflow can easily be adapted to real-time stimulus presentation and online neural recording. In this example, a Kalman Filter is used to estimate the receptive field using Bayesian inference. It receives the pixel values, represented by a flattened array of the 2D visual stimulus, and infers the response of the neuron. In the images.csv file, there are 144 columns. These columns represent the pixel values of the stimulus that was displayed (a 12 x 12 image for a total of 144 pixels). The neuron's binned spike count is recorded in response to each image. These responses are recorded in the responses.csv file. In the LoadData group node, we read in the values from each csv file and zip them together. We add an additional feature to the image observations to represent our model's intercept. This is done when we convert the images csv data to a list in the Format node inside the LoadData group node. Since we are loading all of our data at once, we store the data inside of a ReplaySubject which will represent our observation of data. In the CreateKFModel node, we specify the number of features that will be used observed at each time step. This number is set to the total number of pixels in our image (144 total) plus an additional feature that is used to represent the model intercept. We then specify the coefficients for our precision of the likelihood and the prior. We wait for the model to initialize and then subscribe to the data observations using the SubscribeWhen node. As the workflow runs, the model will perform bayesian inference to learn the visual features that the neuron responds strongly too. The neurons receptive field can then be visualized as the models state parameters evolving through time. To visualize the neurons receptive field, double click on the ReceptiveFieldSimpleCell node at the bottom of the workflow while it is running. You should see a heatmap visualization of the receptive field. You can interact with this heatmap by left clicking to read the values at each pixel, right click to pan the image, or use the scroll wheel to zoom in/out. When you right click, you will see several options appear at the bottom of the visualizer's window where you can change the color palette and render method online. You can reset the plot to the original view by holding Ctrl and double right-click. The window should look like this:"
  },
  "examples/examples/LinearDynamicalSystems/LinearRegression/SimulatedData/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/LinearRegression/SimulatedData/README.html",
    "title": "Simulated Data | Bonsai.ML",
    "keywords": "Simulated Data The code for this repo can be found here. In the following example, you will see how the Kalman Filter can be used to perform Bayesian linear regression to estimate the parameters of a simple linear model with some added gaussian noise. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - System v2.8.1 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Workflow Below is the example workflow for how to perform bayesian linear regression with noisy data generated from a simple linear model. We use a linear model to generate simulated data. The linear model takes the form: \\[ Y_t = \\beta_0 + \\beta_1 X_t + \\epsilon_t \\] In the SimulatedData group node, we define the parameters of the linear model that are used to generate our data. We evaluate our linear model by passing in values of x, which are randomly selected from a uniform distribution. We then generate a noisy observation by taking the output of the model and adding some noise to the data by randomly sampling from a normal distribution. In the CreateKFModel node, we specify the number of features that will be included in our observations at each time step. Since our model has 2 parameters, we set the number of features to 2. We then specify the coefficients for our precision of the likelihood and the prior. We wait for the model to initialize and then subscribe to the data observations using the SubscribeWhen node. As the workflow runs, the model will perform inference to learn the parameters of the underlying linear model used to generate the simuated data. We can then visualize the posterior of the model by creating a multivariate distribution over parameter space that covers a range of values around the true parameters of our linear model. To visualize the multivariate distribution, double click on the CreateMultivariatePDF node at the bottom of the workflow while it is running. You should see a heatmap visualization of the multivariate distribution. You can interact with this heatmap by left clicking to read the values at each pixel, right click to pan the image, or use the scroll wheel to zoom in/out. When you right click, you will see several options appear at the bottom of the visualizer's window where you can change the color palette and render method online. You can reset the plot to the original view by holding Ctrl and double right-click. The window should look like this:"
  },
  "examples/examples/LinearDynamicalSystems/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/README.html",
    "title": "Getting Started | Bonsai.ML",
    "keywords": "Getting Started In general, when using the LinearDynamicalSystems package, you need to configure your Bonsai workflow to run the correct python environment which has the lds_python package installed. If you followed the installation guide, you will have a basic Bonsai-python environment for using the LinearDynamicalSystems package. You will also have installed the basic dependencies required to build and run the Bonsai workflows. However, if you wish to run the examples, we highly recommend following this guide to create and configure the environments needed for each example. This guide has been made for users starting from scratch to get started. Alternatively, you can use the environment you created in the previous guide and install the necessary package dependencies required to run each workflow. All of the examples are self-contained and can be found by going to the Bonsai.ML - Examples repo. For each example, you can bootstrap the python and Bonsai environments from within each example directory. Below, we demonstrate how to get started using the examples by bootstrapping the example environments that are needed to run the example workflow. Windows Dependencies You must have the following installed on your PC in order to run the example workflows: Python (v3.10) Note: python must be installed using the windows installer and must be added to the system PATH Git Microsoft Visual C++ Redistributable Tip When running windows in a virtual machine, it is necessary to install the OpenGL mesa drivers on the windows VM. You can read more about it here Instructions Open the terminal or powershell. Start by cloning the Bonsai.ML - Examples repo with: git clone https://github.com/bonsai-rx/machinelearning-examples.git Change directory to one of the examples. For instance, this will bring you to the simulated data example from the LinearDynamicalSystems.Kinematics package: cd .\\machinelearning-examples\\examples\\LinearDynamicalSystems\\Kinematics\\SimulatedData To create the python virtual environment and install the package, run the following: python -m venv .venv .\\.venv\\Scripts\\activate pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c Tip If you get an error during this step, you need to make sure that scripts are executable from the terminal. To do this, open a powershell terminal using Run as Administrator and enter this line, followed by yes: set-executionpolicy remotesigned To create the bonsai environment and install the packages, run the powershell script: cd .bonsai powershell .\\Setup.ps1 Once installed, run the bonsai executable with: .\\Bonsai.exe Open the workflow example and start the bonsai workflow. Linux Notes on Running Bonsai in Linux Currently, the examples have only been tested on Ubuntu 22.04. Running Bonsai on Linux is still being tested and should be used with caution. We cannot guarantee that these instructions will work for all Linux distributions or versions. It is important that you consult the general Bonsai installation guide on Linux to ensure that the underlying Bonsai package dependencies are met and installed properly. Dependencies You must have the following installed on your PC in order to run the example workflows: Python (v3.10) comes installed with the latest version of Ubuntu 22.04 Git Mono OpenCV and OpenGL binaries Tip For installing OpenCV, the simplest method is to follow the instructions on installing OpenCV from pre-built binaries Instructions Open up a terminal and start by cloning the Bonsai.ML - Examples repo: git clone https://github.com/bonsai-rx/machinelearning-examples.git Change directory to one of the examples. For instance: cd machinelearning-examples/examples/LinearDynamicalSystems/Kinematics/SimulatedData Create the python virtual environment and install the lds python package with the following: python3 -m venv .venv source .venv/bin/activate pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c Tip If you get an error during this step, it may be because you need to install python virtual environment package on your system. You can do so using the following: sudo apt install -y python3.10-venv Run the Setup.sh script using the following: cd .bonsai ./Setup.sh Tip The Setup.sh script uses the xmllint and xmlstarlet packages to convert the assembly location paths in the bonsai config file from Windows to Linux paths. If you do not have these packages already installed on your computer, you can install the xmllint and the xmlstarlet packages using: sudo apt install -y libxml2-utils xmlstarlet Once the bonsai environment has been created, activate the bonsai environment and run the Bonsai executable: source ./activate bonsai Tip If your desktop theme is set to dark mode, the Bonsai GUI can display in weird ways due to the way that mono tries to use the desktop theme in applications. If you use the bonsai-clean command instead of the bonsai command, this will reset the theme that mono uses to the default theme, which can imporove the appearance of the Bonsai GUI. Open the workflow example and start the bonsai workflow."
  },
  "index.html": {
    "href": "index.html",
    "title": "Bonsai - Machine Learning | Bonsai.ML",
    "keywords": "Bonsai - Machine Learning The Bonsai.ML project is a collection of packages with reactive infrastructure for adding machine learning algorithms in Bonsai. Below you will find the list of packages (and the included subpackages) currently available within the Bonsai.ML collection. Bonsai.ML - provides core functionality across all Bonsai.ML packages. Bonsai.ML.LinearDynamicalSystems - package for performing inference of linear dynamical systems. Interfaces with the lds_python package. Bonsai.ML.LinearDynamicalSystems.Kinematics - subpackage included in the LinearDynamicalSystems package which supports using the Kalman Filter to infer kinematic data. Bonsai.ML.LinearDynamicalSystems.LinearRegression - subpackage included in the LinearDynamicalSystems package which supports using the Kalman Filter to perform Bayesian linear regression. Bonsai.ML.Visualizers - provides a set of visualizers for dynamic graphing/plotting. Note Bonsai.ML packages are installed through Bonsai's integrated package manager and are typically available for use immediately. However, certain packages may require additional steps for installation. See the dedicated package section for specific guides and documentation. Acknowledgments Development of this package was supported by funding from the Biotechnology and Biological Sciences Research Council [grant number BB/W019132/1]."
  }
}